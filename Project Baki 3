-----------------------------------------------
-- Unified Exploit GUI with Three Sections:
--   1. Auto Kill
--   2. Styles (Combat Styles)
--   3. Relics (Auto Teleport to Trinkets)
--
-- The GUI opens with an animation and toggles (with animation)
-- when pressing RightAlt.
-- Tab buttons have rounded corners and a pressed (background color) tween.
-- When switching tabs, the new content "pops in" by tweening its UIScale.
--
-- Colors remain unchanged.
-----------------------------------------------

-- SERVICES
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local ContextActionService = game:GetService("ContextActionService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- UTILITY FUNCTION: Create instance with properties.
local function create(className, properties, parent)
    local inst = Instance.new(className)
    for prop, value in pairs(properties) do
        inst[prop] = value
    end
    if parent then
        inst.Parent = parent
    end
    return inst
end

-----------------------------------------------
-- MAIN GUI SETUP
-----------------------------------------------
local ScreenGui = create("ScreenGui", {Name = "ExploitGUI", ResetOnSpawn = false}, playerGui)

local MainWindow = create("Frame", {
    Name = "MainWindow",
    AnchorPoint = Vector2.new(0.5, 0.5),
    Position = UDim2.new(0.5, 0, 0.5, 0),
    Size = UDim2.new(0, 600, 0, 400),
    BackgroundColor3 = Color3.fromRGB(25, 25, 25),
    BorderSizePixel = 0,
}, ScreenGui)
create("UICorner", {CornerRadius = UDim.new(0, 10)}, MainWindow)

-----------------------------------------------
-- TITLE BAR (DRAGGABLE & CLOSE BUTTON)
-----------------------------------------------
local TitleBar = create("Frame", {
    Name = "TitleBar",
    Size = UDim2.new(1, 0, 0, 40),
    BackgroundColor3 = Color3.fromRGB(35, 35, 35),
    BorderSizePixel = 0,
}, MainWindow)
create("UICorner", {CornerRadius = UDim.new(0, 10)}, TitleBar)

local TitleLabel = create("TextLabel", {
    Name = "TitleLabel",
    Text = "Project baki 3 by Xoa",
    Font = Enum.Font.SourceSansBold,
    TextSize = 24,
    TextColor3 = Color3.fromRGB(255,255,255),
    BackgroundTransparency = 1,
    Position = UDim2.new(0,10,0,0),
    Size = UDim2.new(1, -50, 1, 0),
    TextXAlignment = Enum.TextXAlignment.Left,
}, TitleBar)

local CloseButton = create("TextButton", {
    Name = "CloseButton",
    Text = "X",
    Font = Enum.Font.SourceSansBold,
    TextSize = 24,
    TextColor3 = Color3.fromRGB(255,255,255),
    BackgroundColor3 = Color3.fromRGB(200,50,50),
    Size = UDim2.new(0,30,0,30),
    Position = UDim2.new(1,-40,0,5),
    BorderSizePixel = 0,
}, TitleBar)
create("UICorner", {CornerRadius = UDim.new(0, 5)}, CloseButton)
CloseButton.MouseButton1Click:Connect(function() ScreenGui:Destroy() end)

-----------------------------------------------
-- DRAGGABLE FUNCTIONALITY (via TitleBar)
-----------------------------------------------
local dragging = false
local dragInput, dragStart, startPos

TitleBar.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = MainWindow.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then dragging = false end
        end)
    end
end)

TitleBar.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then dragInput = input end
end)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        local delta = input.Position - dragStart
        MainWindow.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-----------------------------------------------
-- LEFT SIDEBAR & TAB BUTTONS
-----------------------------------------------
local Sidebar = create("Frame", {
    Name = "Sidebar",
    Position = UDim2.new(0,0,0,40),
    Size = UDim2.new(0,150,1,-40),
    BackgroundColor3 = Color3.fromRGB(35,35,35),
    BorderSizePixel = 0,
}, MainWindow)
create("UICorner", {CornerRadius = UDim.new(0,10)}, Sidebar)

local TabButtonsContainer = create("Frame", {
    Name = "TabButtonsContainer",
    Size = UDim2.new(1,0,1,0),
    BackgroundTransparency = 1,
    Position = UDim2.new(0,0,0,0),
}, Sidebar)
local TabList = create("UIListLayout", {
    Padding = UDim.new(0,5),
    FillDirection = Enum.FillDirection.Vertical,
    SortOrder = Enum.SortOrder.LayoutOrder,
}, TabButtonsContainer)

local AutoKillTabButton = create("TextButton", {
    Name = "AutoKillTabButton",
    Text = "Auto Kill",
    Font = Enum.Font.SourceSans,
    TextSize = 20,
    TextColor3 = Color3.fromRGB(255,255,255),
    BackgroundColor3 = Color3.fromRGB(35,35,35),
    Size = UDim2.new(1, -10, 0, 40),
    LayoutOrder = 1,
}, TabButtonsContainer)
create("UICorner", {CornerRadius = UDim.new(0, 5)}, AutoKillTabButton)

local StylesTabButton = create("TextButton", {
    Name = "StylesTabButton",
    Text = "Styles",
    Font = Enum.Font.SourceSans,
    TextSize = 20,
    TextColor3 = Color3.fromRGB(255,255,255),
    BackgroundColor3 = Color3.fromRGB(35,35,35),
    Size = UDim2.new(1, -10, 0, 40),
    LayoutOrder = 2,
}, TabButtonsContainer)
create("UICorner", {CornerRadius = UDim.new(0, 5)}, StylesTabButton)

local RelicsTabButton = create("TextButton", {
    Name = "RelicsTabButton",
    Text = "Relics",
    Font = Enum.Font.SourceSans,
    TextSize = 20,
    TextColor3 = Color3.fromRGB(255,255,255),
    BackgroundColor3 = Color3.fromRGB(35,35,35),
    Size = UDim2.new(1, -10, 0, 40),
    LayoutOrder = 3,
}, TabButtonsContainer)
create("UICorner", {CornerRadius = UDim.new(0, 5)}, RelicsTabButton)

-- Function to animate tab selection (tween button background colors)
local tabButtons = {AutoKillTabButton, StylesTabButton, RelicsTabButton}
local function setTabSelected(selectedButton)
    for _, button in ipairs(tabButtons) do
        if button == selectedButton then
            TweenService:Create(button, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(50,50,50)}):Play()
        else
            TweenService:Create(button, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(35,35,35)}):Play()
        end
    end
end

-----------------------------------------------
-- CONTENT AREA (Single container for tab content)
-----------------------------------------------
local ContentArea = create("Frame", {
    Name = "ContentArea",
    Position = UDim2.new(0,150,0,40),
    Size = UDim2.new(1, -150, 1, -40),
    BackgroundColor3 = Color3.fromRGB(25,25,25),
    BorderSizePixel = 0,
}, MainWindow)
create("UICorner", {CornerRadius = UDim.new(0, 10)}, ContentArea)

-- Create content frames for each tab.
local AutoKillContent = create("Frame", {
    Name = "AutoKillContent",
    Size = UDim2.new(1,0,1,0),
    BackgroundTransparency = 1,
    Visible = true,
}, ContentArea)

local StylesContent = create("Frame", {
    Name = "StylesContent",
    Size = UDim2.new(1,0,1,0),
    BackgroundTransparency = 1,
    Visible = false,
}, ContentArea)

local RelicsContent = create("Frame", {
    Name = "RelicsContent",
    Size = UDim2.new(1,0,1,0),
    BackgroundTransparency = 1,
    Visible = false,
}, ContentArea)

-- New "pop" animation: using UIScale to tween from 0.95 to 1.
local function switchTab(newFrame)
    for _, child in ipairs(ContentArea:GetChildren()) do
        if child:IsA("Frame") then child.Visible = false end
    end
    newFrame.Visible = true
    -- Add or get UIScale; set its Scale to 0.95, then tween to 1.
    local scaleObj = newFrame:FindFirstChild("UIScale") or create("UIScale", {Scale = 0.95}, newFrame)
    scaleObj.Scale = 0.95
    TweenService:Create(scaleObj, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Scale = 1}):Play()
end

-----------------------------------------------
-- TAB 1: AUTO KILL SECTION CONTENT
-----------------------------------------------
local AK_SearchBar = create("TextBox", {
    Name = "AK_SearchBar",
    Size = UDim2.new(1, -40, 0, 30),
    Position = UDim2.new(0, 20, 0, 10),
    PlaceholderText = "Search Bosses...",
    Text = "",
    Font = Enum.Font.SourceSans,
    TextSize = 18,
    TextColor3 = Color3.fromRGB(255,255,255),
    BackgroundColor3 = Color3.fromRGB(35,35,35),
    BorderSizePixel = 0,
}, AutoKillContent)
create("UICorner", {CornerRadius = UDim.new(0,5)}, AK_SearchBar)

local EveryBossButton = create("TextButton", {
    Name = "EveryBossButton",
    Text = "Every Boss: OFF",
    Font = Enum.Font.SourceSans,
    TextSize = 20,
    TextColor3 = Color3.fromRGB(255,255,255),
    BackgroundColor3 = Color3.fromRGB(255,50,50),
    Size = UDim2.new(1, -40, 0, 40),
    Position = UDim2.new(0, 20, 0, 50),
    BorderSizePixel = 0,
}, AutoKillContent)
create("UICorner", {CornerRadius = UDim.new(0,5)}, EveryBossButton)

local BossTogglesScrollingFrame = create("ScrollingFrame", {
    Name = "BossTogglesScrollingFrame",
    Size = UDim2.new(1, 0, 1, -100),
    Position = UDim2.new(0, 0, 0, 100),
    BackgroundTransparency = 1,
    ScrollBarThickness = 5,
    ScrollBarImageColor3 = Color3.fromRGB(255,50,50),
}, AutoKillContent)
BossTogglesScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
local BossUIList = create("UIListLayout", {
    Padding = UDim.new(0, 5),
    FillDirection = Enum.FillDirection.Vertical,
    SortOrder = Enum.SortOrder.LayoutOrder,
}, BossTogglesScrollingFrame)
BossUIList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
    BossTogglesScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, BossUIList.AbsoluteContentSize.Y)
end)

local autoBossNames = {
    "Kiyosumi Kato", "Retsu", "Dorian", "Sikorsky", "Spec", "Doyle",
    "Yanagi", "Yasha Ape Jr.", "Raian", "KiryuKazuma", "Pickle",
    "Musashi", "Predator", "Armstrong", "Jason Voorhees",
    "Goro Majima, Mad Dog of Shimano", "Jetstream Sam", "Headless One",
    "Slayer", "Sukune", "Leatherface", "The Protagonist", "Yasha Ape", "AdamSmasher"
}
local autoBossToggles = {}
local autoBossLoopRunning = {}
local autoBossButtons = {}
for _, boss in ipairs(autoBossNames) do
    autoBossToggles[boss] = false
    autoBossLoopRunning[boss] = false
end

for _, boss in ipairs(autoBossNames) do
    local bossButton = create("TextButton", {
        Name = "BossButton_" .. boss,
        Text = boss .. ": OFF",
        Font = Enum.Font.SourceSans,
        TextSize = 20,
        TextColor3 = Color3.fromRGB(255,255,255),
        BackgroundColor3 = Color3.fromRGB(255,50,50),
        Size = UDim2.new(1, -20, 0, 40),
        LayoutOrder = 1,
    }, BossTogglesScrollingFrame)
    create("UICorner", {CornerRadius = UDim.new(0,5)}, bossButton)
    autoBossButtons[boss] = bossButton

    bossButton.MouseButton1Click:Connect(function()
        autoBossToggles[boss] = not autoBossToggles[boss]
        if autoBossToggles[boss] then
            bossButton.Text = boss .. ": ON"
            if not autoBossLoopRunning[boss] then
                autoBossLoopRunning[boss] = true
                task.spawn(function()
                    while autoBossToggles[boss] do
                        local playerObj = workspace.Game.Players:FindFirstChild(boss)
                        if playerObj and playerObj:FindFirstChild("Humanoid") then
                            local args = {"Skill", playerObj.Humanoid}
                            ReplicatedStorage.Remotes.ClientToServer.BasicCombat:FireServer(unpack(args))
                        end
                        task.wait(0)
                    end
                    autoBossLoopRunning[boss] = false
                end)
            end
        else
            bossButton.Text = boss .. ": OFF"
        end
    end)
end

EveryBossButton.MouseButton1Click:Connect(function()
    local allBossesOn = not _G.allBossesOn
    _G.allBossesOn = allBossesOn
    if allBossesOn then
        EveryBossButton.Text = "Every Boss: ON"
    else
        EveryBossButton.Text = "Every Boss: OFF"
    end
    for _, boss in ipairs(autoBossNames) do
        autoBossToggles[boss] = allBossesOn
        if allBossesOn then
            autoBossButtons[boss].Text = boss .. ": ON"
            if not autoBossLoopRunning[boss] then
                autoBossLoopRunning[boss] = true
                task.spawn(function()
                    while autoBossToggles[boss] do
                        local playerObj = workspace.Game.Players:FindFirstChild(boss)
                        if playerObj and playerObj:FindFirstChild("Humanoid") then
                            local args = {"Skill", playerObj.Humanoid}
                            ReplicatedStorage.Remotes.ClientToServer.BasicCombat:FireServer(unpack(args))
                        end
                        task.wait(0)
                    end
                    autoBossLoopRunning[boss] = false
                end)
            end
        else
            autoBossButtons[boss].Text = boss .. ": OFF"
        end
    end
end)

AK_SearchBar:GetPropertyChangedSignal("Text"):Connect(function()
    local query = AK_SearchBar.Text:lower()
    for _, button in ipairs(BossTogglesScrollingFrame:GetChildren()) do
        if button:IsA("TextButton") then
            local bName = button.Name:sub(12):lower()
            button.Visible = (query == "" or bName:find(query))
        end
    end
end)

-----------------------------------------------
-- TAB 2: STYLES SECTION CONTENT
-----------------------------------------------
local StylesContent = create("Frame", {
    Name = "StylesContent",
    Size = UDim2.new(1, 0, 1, 0),
    BackgroundTransparency = 1,
    Visible = false,
}, ContentArea)

local StyleSearchBar = create("TextBox", {
    Name = "StyleSearchBar",
    Size = UDim2.new(1, -40, 0, 30),
    Position = UDim2.new(0, 20, 0, 10),
    PlaceholderText = "Search Trainers...",
    Text = "",
    Font = Enum.Font.SourceSans,
    TextSize = 18,
    TextColor3 = Color3.fromRGB(255,255,255),
    BackgroundColor3 = Color3.fromRGB(35,35,35),
    BorderSizePixel = 0,
}, StylesContent)
create("UICorner", {CornerRadius = UDim.new(0,5)}, StyleSearchBar)

local TrainerScrollingFrame = create("ScrollingFrame", {
    Name = "TrainerScrollingFrame",
    Size = UDim2.new(1, 0, 1, -50),
    Position = UDim2.new(0, 0, 0, 50),
    BackgroundTransparency = 1,
    ScrollBarThickness = 5,
    ScrollBarImageColor3 = Color3.fromRGB(255,50,50),
}, StylesContent)
TrainerScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
local TrainerUIList = create("UIListLayout", {
    Padding = UDim.new(0,5),
    FillDirection = Enum.FillDirection.Vertical,
    SortOrder = Enum.SortOrder.LayoutOrder,
}, TrainerScrollingFrame)
TrainerUIList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
    TrainerScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, TrainerUIList.AbsoluteContentSize.Y)
end)

local function equipStyle(trainerName)
    local args = { [1] = trainerName }
    ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("ClientToServer"):WaitForChild("Quest"):InvokeServer(unpack(args))
end

local trainersFolder = workspace.Game and workspace.Game:FindFirstChild("Trainers")
if trainersFolder then
    for _, trainer in ipairs(trainersFolder:GetChildren()) do
        if trainer:IsA("Model") or trainer:IsA("Folder") then
            local tName = trainer.Name
            local trainerButton = create("TextButton", {
                Name = "TrainerButton_" .. tName,
                Text = tName,
                Font = Enum.Font.SourceSans,
                TextSize = 20,
                TextColor3 = Color3.fromRGB(255,255,255),
                BackgroundColor3 = Color3.fromRGB(255,50,50),
                Size = UDim2.new(1, -20, 0, 40),
                LayoutOrder = 1,
            }, TrainerScrollingFrame)
            create("UICorner", {CornerRadius = UDim.new(0,5)}, trainerButton)
            trainerButton.MouseButton1Click:Connect(function() equipStyle(tName) end)
        end
    end
end

StyleSearchBar:GetPropertyChangedSignal("Text"):Connect(function()
    local query = StyleSearchBar.Text:lower()
    for _, trainerButton in ipairs(TrainerScrollingFrame:GetChildren()) do
        if trainerButton:IsA("TextButton") then
            local name = trainerButton.Name:sub(15):lower()
            trainerButton.Visible = (query == "" or name:find(query))
        end
    end
end)

-----------------------------------------------
-- TAB 3: RELICS SECTION CONTENT
-----------------------------------------------
local RelicsContent = create("Frame", {
    Name = "RelicsContent",
    Size = UDim2.new(1, 0, 1, 0),
    BackgroundTransparency = 1,
    Visible = false,
}, ContentArea)

local RelicsToggleButton = create("TextButton", {
    Name = "RelicsToggleButton",
    Text = "Enable Relics Teleport: OFF",
    Font = Enum.Font.SourceSans,
    TextSize = 20,
    TextColor3 = Color3.fromRGB(255,255,255),
    BackgroundColor3 = Color3.fromRGB(255,50,50),
    Size = UDim2.new(1, -40, 0, 40),
    Position = UDim2.new(0, 20, 0, 10),
    BorderSizePixel = 0,
}, RelicsContent)
create("UICorner", {CornerRadius = UDim.new(0,5)}, RelicsToggleButton)

local relicTeleportEnabled = false
local relicLoopRunning = false

RelicsToggleButton.MouseButton1Click:Connect(function()
    relicTeleportEnabled = not relicTeleportEnabled
    if relicTeleportEnabled then
        RelicsToggleButton.Text = "Enable Relics Teleport: ON"
        if not relicLoopRunning then
            relicLoopRunning = true
            task.spawn(function()
                while relicTeleportEnabled do
                    local spawnedTrinkets = workspace.Game.Trinkets and workspace.Game.Trinkets:FindFirstChild("Spawned")
                    if spawnedTrinkets then
                        for _, relic in ipairs(spawnedTrinkets:GetChildren()) do
                            if relic:IsA("BasePart") and relic:FindFirstChildOfClass("TouchTransmitter") then
                                local character = player.Character
                                if character then
                                    local hrp = character:FindFirstChild("HumanoidRootPart")
                                    if hrp then
                                        local originalCFrame = hrp.CFrame
                                        hrp.CFrame = relic.CFrame + Vector3.new(0, 3, 0)
                                        local startTime = tick()
                                        while relic and relic.Parent and (tick() - startTime < 10) and relicTeleportEnabled do
                                            task.wait(0.1)
                                        end
                                        hrp.CFrame = originalCFrame
                                        task.wait(1)
                                    end
                                end
                            end
                        end
                    end
                    task.wait(1)
                end
                relicLoopRunning = false
            end)
        end
    else
        RelicsToggleButton.Text = "Enable Relics Teleport: OFF"
    end
end)

-----------------------------------------------
-- TAB BUTTON EVENT CONNECTIONS (SWITCHING TABS)
-----------------------------------------------
AutoKillTabButton.MouseButton1Click:Connect(function()
    setTabSelected(AutoKillTabButton)
    switchTab(AutoKillContent)
end)

StylesTabButton.MouseButton1Click:Connect(function()
    setTabSelected(StylesTabButton)
    switchTab(StylesContent)
end)

RelicsTabButton.MouseButton1Click:Connect(function()
    setTabSelected(RelicsTabButton)
    switchTab(RelicsContent)
end)

-----------------------------------------------
-- ANIMATED TOGGLE VIA RIGHTALT (OPEN/CLOSE)
-----------------------------------------------
local originalSize = UDim2.new(0,600,0,400)
ContextActionService:BindAction("ToggleExploitGUI", function(actionName, inputState, inputObject)
    if inputState == Enum.UserInputState.Begin then
        if MainWindow.Visible then
            local tweenClose = TweenService:Create(MainWindow, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {Size = UDim2.new(0,0,0,0)})
            tweenClose:Play()
            tweenClose.Completed:Connect(function()
                MainWindow.Visible = false
                MainWindow.Size = originalSize
            end)
        else
            MainWindow.Visible = true
            MainWindow.Size = UDim2.new(0,0,0,0)
            local tweenOpen = TweenService:Create(MainWindow, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = originalSize})
            tweenOpen:Play()
        end
    end
    return Enum.ContextActionResult.Pass
end, false, Enum.KeyCode.RightAlt)

-----------------------------------------------
-- INITIAL ANIMATION ON EXECUTION
-----------------------------------------------
MainWindow.Size = UDim2.new(0,0,0,0)
task.delay(0.1, function()
    local tweenInitialOpen = TweenService:Create(MainWindow, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = originalSize})
    tweenInitialOpen:Play()
end)
