local Services = {
    ReplicatedStorage = game:GetService("ReplicatedStorage"),
    Players = game:GetService("Players"),
    TweenService = game:GetService("TweenService"),
    RunService = game:GetService("RunService")
}

local Player = Services.Players.LocalPlayer
local PlayerGui = Player:WaitForChild("PlayerGui")

local Config = {
    Name = "SigmaBoyGuiEnhanced",
    Title = "SIGMA BOY GUI",
    Font = Enum.Font.SciFi,
    Colors = {
        MainFrameBackground = Color3.fromRGB(35, 35, 35),
        HeaderBackground = Color3.fromRGB(25, 25, 25),
        Text = Color3.fromRGB(255, 255, 255),
        
        MinimizeButtonDefault = Color3.fromRGB(50, 50, 50),
        
        EatButtonOff = Color3.fromRGB(255, 50, 50),
        EatButtonOn = Color3.fromRGB(50, 200, 50),
        
        GrabButtonOff = Color3.fromRGB(50, 100, 255),
        GrabButtonOn = Color3.fromRGB(80, 220, 120),
        
        HoverLerpFactor = 0.2,
    },
    Sizes = {
        MainFrame = UDim2.new(0, 350, 0, 250),
        MainFrameMinimized = UDim2.new(0, 350, 0, 45),
        Header = UDim2.new(1, 0, 0, 45),
        MinimizeButton = UDim2.new(0, 40, 0, 40),
        ActionButton = UDim2.new(0.8, 0, 0, 45),
    },
    Positions = {
        MainFrame = UDim2.new(0.5, -175, 0.5, -125),
        MinimizeButton = UDim2.new(1, -50, 0.5, -20),
        EatButton = UDim2.new(0.1, 0, 0.4, 0),
        GrabButton = UDim2.new(0.1, 0, 0.6, 0),
    },
    Text = {
        SizeTitle = 22,
        SizeButton = 20,
        EatButton = { On = "AUTO EAT: ON", Off = "AUTO EAT: OFF" },
        GrabButton = { On = "AUTO GRAB: ON", Off = "AUTO GRAB: OFF" },
        MinimizeButton = { Minimized = "+", Maximized = "-" }
    },
    CornerRadiusValue = UDim.new(0, 12),
    EventArguments = {
        Eat = {"eat"},
        Grab = {"grab"},
    },
    TweenSettings = {
        Minimize = TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
        Hover = TweenInfo.new(0.1)
    }
}

local guiState = {
    eatEnabled = false,
    grabEnabled = false,
    isMinimized = false
}

local RemoteEvents = {
    Eat = Services.ReplicatedStorage:WaitForChild("LocalEvents"):WaitForChild("Eat"),
    Grab = Services.ReplicatedStorage:WaitForChild("LocalEvents"):WaitForChild("Grab")
}

local UI = {}

local function create(instanceType, properties)
    local inst = Instance.new(instanceType)
    for prop, value in pairs(properties or {}) do
        inst[prop] = value
    end
    return inst
end

local function addCorner(element, radius)
    create("UICorner", {
        CornerRadius = radius or Config.CornerRadiusValue,
        Parent = element
    })
end

local function createEventFirer(event, args, isEnabledCheck)
    task.spawn(function()
        while isEnabledCheck() and task.wait() do
            event:Fire(unpack(args))
        end
    end)
end

local function setupGui()
    UI.ScreenGui = create("ScreenGui", {
        Name = Config.Name,
        Parent = PlayerGui,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        ResetOnSpawn = false
    })

    UI.MainFrame = create("Frame", {
        Parent = UI.ScreenGui,
        Size = Config.Sizes.MainFrame,
        Position = Config.Positions.MainFrame,
        BackgroundColor3 = Config.Colors.MainFrameBackground,
        BorderSizePixel = 0,
        AnchorPoint = Vector2.new(0.5, 0.5),
        Active = true,
        Draggable = true
    })
    addCorner(UI.MainFrame)

    UI.Header = create("Frame", {
        Parent = UI.MainFrame,
        Size = Config.Sizes.Header,
        BackgroundColor3 = Config.Colors.HeaderBackground,
        BorderSizePixel = 0
    })
    addCorner(UI.Header)

    UI.Title = create("TextLabel", {
        Parent = UI.Header,
        Size = UDim2.new(1, -(Config.Sizes.MinimizeButton.X.Offset + 10), 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        Text = Config.Title,
        TextColor3 = Config.Colors.Text,
        Font = Config.Font,
        TextSize = Config.Text.SizeTitle,
        TextXAlignment = Enum.TextXAlignment.Left
    })

    UI.MinimizeButton = create("TextButton", {
        Parent = UI.Header,
        Size = Config.Sizes.MinimizeButton,
        Position = Config.Positions.MinimizeButton,
        BackgroundColor3 = Config.Colors.MinimizeButtonDefault,
        Text = Config.Text.MinimizeButton.Maximized,
        Font = Config.Font,
        TextSize = Config.Text.SizeButton,
        TextColor3 = Config.Colors.Text,
        AutoButtonColor = false
    })
    addCorner(UI.MinimizeButton)

    local function createActionButton(name, textKey, position, offColor)
        local button = create("TextButton", {
            Parent = UI.MainFrame,
            Name = name,
            Size = Config.Sizes.ActionButton,
            Position = position,
            Text = Config.Text[textKey].Off,
            BackgroundColor3 = offColor,
            Font = Config.Font,
            TextSize = Config.Text.SizeButton,
            TextColor3 = Config.Colors.Text,
            AutoButtonColor = false
        })
        addCorner(button)
        return button
    end

    UI.EatButton = createActionButton("EatButton", "EatButton", Config.Positions.EatButton, Config.Colors.EatButtonOff)
    UI.GrabButton = createActionButton("GrabButton", "GrabButton", Config.Positions.GrabButton, Config.Colors.GrabButtonOff)
end

local function setupInteractions()
    UI.MinimizeButton.MouseButton1Click:Connect(function()
        guiState.isMinimized = not guiState.isMinimized
        local targetSize = guiState.isMinimized and Config.Sizes.MainFrameMinimized or Config.Sizes.MainFrame
        local tween = Services.TweenService:Create(UI.MainFrame, Config.TweenSettings.Minimize, {Size = targetSize})
        tween:Play()

        UI.EatButton.Visible = not guiState.isMinimized
        UI.GrabButton.Visible = not guiState.isMinimized
        UI.MinimizeButton.Text = guiState.isMinimized and Config.Text.MinimizeButton.Minimized or Config.Text.MinimizeButton.Maximized
    end)

    local function setupToggleButton(button, flagName, textKey, event, eventArgs, offColor, onColor)
        button.MouseButton1Click:Connect(function()
            guiState[flagName] = not guiState[flagName]
            local isOn = guiState[flagName]
            button.Text = isOn and Config.Text[textKey].On or Config.Text[textKey].Off
            
            local targetColor = isOn and onColor or offColor
            Services.TweenService:Create(button, Config.TweenSettings.Hover, {BackgroundColor3 = targetColor}):Play()

            if isOn then
                createEventFirer(event, eventArgs, function() return guiState[flagName] end)
            end
        end)
    end

    setupToggleButton(
        UI.EatButton, "eatEnabled", "EatButton", RemoteEvents.Eat, Config.EventArguments.Eat,
        Config.Colors.EatButtonOff, Config.Colors.EatButtonOn
    )
    setupToggleButton(
        UI.GrabButton, "grabEnabled", "GrabButton", RemoteEvents.Grab, Config.EventArguments.Grab,
        Config.Colors.GrabButtonOff, Config.Colors.GrabButtonOn
    )

    local function applyHoverEffect(button, baseColor)
        local hoverColor = baseColor:Lerp(Color3.fromRGB(255,255,255), Config.Colors.HoverLerpFactor)
        
        button.MouseEnter:Connect(function()
            if button.BackgroundColor3 == baseColor then
                 Services.TweenService:Create(button, Config.TweenSettings.Hover, {BackgroundColor3 = hoverColor}):Play()
            end
        end)
        button.MouseLeave:Connect(function()
            if button.BackgroundColor3 == hoverColor then
                Services.TweenService:Create(button, Config.TweenSettings.Hover, {BackgroundColor3 = baseColor}):Play()
            end
        end)
    end

    applyHoverEffect(UI.MinimizeButton, Config.Colors.MinimizeButtonDefault)
    applyHoverEffect(UI.EatButton, Config.Colors.EatButtonOff)
    applyHoverEffect(UI.GrabButton, Config.Colors.GrabButtonOff)
end

local function init()
    local oldGui = PlayerGui:FindFirstChild(Config.Name)
    if oldGui then
        oldGui:Destroy()
    end

    setupGui()
    setupInteractions()
end

init()
